{"version":3,"sources":["components/Home.js","components/Curriculum.js","components/Projects.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["Home","react_default","a","createElement","className","react_router_dom","to","href","src","React","Component","Curriculum","Projects","App","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"sMAyCeA,mLAnCP,OAASC,EAAAC,EAAAC,cAAA,WAAUC,UAAY,QACnCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACjBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,iBAAiBE,GAAK,eAAtC,cACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAK,aAApC,cAIAL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAChBH,EAAAC,EAAAC,cAAA,uBAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,iZAOJF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMG,KAAK,8BAA6BN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,uDAC9DP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUG,KAAK,oDAAmDN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,uDACxFP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaG,KAAK,sEAA/B,oBA7BWE,IAAMC,WCSVC,0LARP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAHFK,IAAMC,YCUhBE,mLARP,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oDAJOM,IAAMC,WCmBdG,MAdf,WACE,OACCZ,EAAAC,EAAAC,cAAA,WAASC,UAAU,OACjBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACDJ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWhB,EAAMiB,OAAK,IACtChB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWL,IACrCV,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWJ,QCHrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iCEnInB,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA","file":"static/js/main.edaf9587.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return ( < section className = \"Home\" >\r\n    <header className=\"Header\">\r\n        <div className=\"title\">\r\n            <h1> MYRNA  MARES</h1>\r\n        </div >\r\n    \r\n        <div className = \"Router\" >\r\n        <Link className=\"Routcurriculum\" to = \"/Curriculum\" >Curriculum</Link>\r\n        <Link className=\"Routprojects\" to = \"/Projects\" >Projects</Link>\r\n        </div >\r\n    </header>\r\n        \r\n        <div className= \"AboutMe\">\r\n        <h2>About Me</h2>\r\n        </div>\r\n\r\n        <div className=\"Text\">\r\n        <text>Me considero una mujer multidisciplinaria realmente interesada \r\n        en el desarrollo humano y profesional, mis habilidades me permiten realizar \r\n        múltiples actividades de manera eficiente. Las áreas en las que estoy enfocado \r\n        son la tecnología y la programación, específicamente el front-end, siempre \r\n        estoy aprendiendo y tratando de adquirir nuevos conocimientos y habilidades.</text>\r\n        </div>\r\n\r\n    <aside>\r\n        <a className=\"git\" href=\"https://github.com/myrna90\"><img src=\"https://image.flaticon.com/icons/svg/25/25231.svg\"/></a>\r\n        <a className=\"linkdin\" href=\"https://www.linkedin.com/in/myrna-mares-cabello/\"><img src=\"https://image.flaticon.com/icons/svg/34/34405.svg\"/></a>\r\n        <a className=\"curriculum\" href=\"https://drive.google.com/open?id=1WdigbqSb-2eRjgOnIkXRTytIGxtIUgp8\">Mostrar</a>\r\n    </aside>\r\n            \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {pdf} from \"react-pdf\"\r\nclass Curriculum extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"curriculum\">\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Curriculum;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Projects extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Si funciona el router Projects</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport './index.css';\r\nimport {HashRouter,Link, Route, Switch} from 'react-router-dom';\r\nimport Home from \"./components/Home\";\r\nimport Curriculum from \"./components/Curriculum\";\r\nimport Projects from \"./components/Projects\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction App() {\r\n  return (\r\n   <section className=\"App\">\r\n     <HashRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={Home} exact/>\r\n      <Route path=\"/Curriculum\" component={Curriculum}/>\r\n      <Route path=\"/Projects\" component={Projects}/>\r\n    </Switch>\r\n     </HashRouter>\r\n   </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 32;"],"sourceRoot":""}